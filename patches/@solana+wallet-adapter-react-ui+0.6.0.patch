diff --git a/node_modules/@solana/wallet-adapter-react-ui/lib/WalletMultiButton.js b/node_modules/@solana/wallet-adapter-react-ui/lib/WalletMultiButton.js
index b618091..54bab79 100644
--- a/node_modules/@solana/wallet-adapter-react-ui/lib/WalletMultiButton.js
+++ b/node_modules/@solana/wallet-adapter-react-ui/lib/WalletMultiButton.js
@@ -25,13 +25,20 @@ import { useWalletModal } from './useWalletModal';
 import { WalletConnectButton } from './WalletConnectButton';
 import { WalletIcon } from './WalletIcon';
 import { WalletModalButton } from './WalletModalButton';
+
+
 export const WalletMultiButton = (_a) => {
+    //new
     var { children } = _a, props = __rest(_a, ["children"]);
+
+    //1.
     const { publicKey, wallet, disconnect } = useWallet();
     const { setVisible } = useWalletModal();
     const [copied, setCopied] = useState(false);
     const [active, setActive] = useState(false);
     const ref = useRef(null);
+
+    //2.
     const base58 = useMemo(() => publicKey === null || publicKey === void 0 ? void 0 : publicKey.toBase58(), [publicKey]);
     const content = useMemo(() => {
         if (children)
@@ -40,6 +47,8 @@ export const WalletMultiButton = (_a) => {
             return null;
         return base58.slice(0, 4) + '..' + base58.slice(-4);
     }, [children, wallet, base58]);
+
+    //3.
     const copyAddress = useCallback(() => __awaiter(void 0, void 0, void 0, function* () {
         if (base58) {
             yield navigator.clipboard.writeText(base58);
@@ -47,12 +56,15 @@ export const WalletMultiButton = (_a) => {
             setTimeout(() => setCopied(false), 400);
         }
     }), [base58]);
+
+    //4. 
     const openDropdown = useCallback(() => setActive(true), [setActive]);
     const closeDropdown = useCallback(() => setActive(false), [setActive]);
     const openModal = useCallback(() => {
         setVisible(true);
         closeDropdown();
     }, [setVisible, closeDropdown]);
+    
     useEffect(() => {
         const listener = (event) => {
             const node = ref.current;
@@ -61,22 +73,29 @@ export const WalletMultiButton = (_a) => {
                 return;
             closeDropdown();
         };
+
         document.addEventListener('mousedown', listener);
         document.addEventListener('touchstart', listener);
+
         return () => {
             document.removeEventListener('mousedown', listener);
             document.removeEventListener('touchstart', listener);
         };
     }, [ref, closeDropdown]);
+
+
     if (!wallet)
         return React.createElement(WalletModalButton, Object.assign({}, props), children);
     if (!base58)
         return React.createElement(WalletConnectButton, Object.assign({}, props), children);
-    return (React.createElement("div", { className: "wallet-adapter-dropdown" },
-        React.createElement(Button, Object.assign({ "aria-expanded": active, className: "wallet-adapter-button-trigger", style: Object.assign({ pointerEvents: active ? 'none' : 'auto' }, props.style), onClick: openDropdown, startIcon: React.createElement(WalletIcon, { wallet: wallet }) }, props), content),
-        React.createElement("ul", { "aria-label": "dropdown-list", className: `wallet-adapter-dropdown-list ${active && 'wallet-adapter-dropdown-list-active'}`, ref: ref, role: "menu" },
-            React.createElement("li", { onClick: copyAddress, className: "wallet-adapter-dropdown-list-item", role: "menuitem" }, copied ? 'Copied' : 'Copy address'),
-            React.createElement("li", { onClick: openModal, className: "wallet-adapter-dropdown-list-item", role: "menuitem" }, "Connect a different wallet"),
-            React.createElement("li", { onClick: disconnect, className: "wallet-adapter-dropdown-list-item", role: "menuitem" }, "Disconnect"))));
+
+
+    return (
+        
+        React.createElement("div", { className: "wallet-adapter-dropdown" },
+            React.createElement(Button, Object.assign({ "aria-expanded": active, className: "wallet-adapter-button-trigger", style: Object.assign({ pointerEvents: active ? 'none' : 'auto' }, props.style), onClick: openDropdown, startIcon: React.createElement(WalletIcon, { wallet: wallet }) }, props), content),
+                
+            )
+        );
 };
 //# sourceMappingURL=WalletMultiButton.js.map
\ No newline at end of file
